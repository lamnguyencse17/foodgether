// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Restaurant {
  id                Int     @id @default(autoincrement())
  deliveryId        Int     @unique
  name              String
  address           String  @db.Text
  url               String  @unique
  isQualityMerchant Boolean @default(false)
  position          Json
  priceRange        Json

  dishTypes DishTypes[]

  photos Json? @default("[]")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([url], name: "url")
}

model DishTypes {
  id           Int        @id
  name         String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  restaurantId Int
  dishes       Dish[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([id(sort: Desc)])
}

model Dish {
  id          Int     @id @default(autoincrement())
  name        String  @db.Text
  description String  @db.Text
  isAvailable Boolean @default(true)
  isActive    Boolean @default(true)

  dishTypes   DishTypes? @relation(fields: [dishTypesId], references: [id], onDelete: Cascade)
  dishTypesId Int?

  price Json

  discountPrice Json

  photos Json? @default("[]")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
