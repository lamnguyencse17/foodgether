// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native"]
  previewFeatures = ["tracing"]
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String           @id @default(cuid())
  name            String?
  email           String?          @unique
  emailVerified   DateTime?
  image           String?
  accounts        Account[]
  sessions        Session[]
  invitations     Invitation[]
  orders          Order[]
  blacklistedUser BlacklistedUser?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Restaurant {
  id                Int     @id @default(autoincrement())
  deliveryId        Int     @unique
  name              String
  address           String  @db.Text
  url               String  @unique
  isQualityMerchant Boolean @default(false)
  isAvailable       Boolean @default(false)
  position          Json
  priceRange        Json

  dishTypes DishTypes[]

  photos Json

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  dish      Dish[]
  option    Option[]

  @@index([url], name: "url")
}

model DishTypes {
  id           Int
  name         String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  restaurantId Int
  displayOrder Int        @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  dishTypeAndDishes DishTypeAndDishes[]

  @@id([id, restaurantId])
  @@unique([id, restaurantId])
  @@index(displayOrder, name: "dishTypesDisplayOrder")
}

model DishTypeAndDishes {
  id Int @id @default(autoincrement())

  dish   Dish @relation(fields: [dishId], references: [id], onDelete: Cascade)
  dishId Int

  dishtype     DishTypes @relation(fields: [dishTypeId, restaurantId], references: [id, restaurantId], onDelete: Cascade)
  dishTypeId   Int
  restaurantId Int

  @@unique([id, dishId])
}

model Dish {
  id          Int     @id @default(autoincrement())
  name        String  @db.Text
  description String  @db.Text
  isAvailable Boolean @default(true)
  isActive    Boolean @default(true)

  price Json

  discountPrice Json

  photos Json

  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  dishTypeAndDishes DishTypeAndDishes[]

  restaurant   Restaurant?  @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  restaurantId Int?
  dishOption   DishOption[]

  @@unique([id, restaurantId])
}

model DishOption {
  id           Int    @id @default(autoincrement())
  dish         Dish   @relation(fields: [dishId], references: [id], onDelete: Cascade)
  dishId       Int
  option       Option @relation(fields: [optionId, restaurantId], references: [id, restaurantId], onDelete: Cascade)
  optionId     Int
  restaurantId Int

  @@unique([id, dishId, restaurantId])
}

model Option {
  id           Int          @default(autoincrement())
  isMandatory  Boolean      @default(false)
  name         String
  ntop         String
  items        OptionItem[]
  restaurant   Restaurant   @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  restaurantId Int

  minQuantity Int
  maxQuantity Int
  dishOption  DishOption[]

  @@id([id, restaurantId])
  @@index([restaurantId])
}

model OptionItem {
  id          Int     @default(autoincrement())
  name        String
  weight      Int?
  price       Json
  ntopPrice   Json
  isDefault   Boolean @default(false)
  maxQuantity Int?
  topOrder    Int     @default(0)
  dishId      Int

  option       Option? @relation(fields: [optionId, restaurantId], references: [id, restaurantId], onDelete: Cascade)
  optionId     Int?
  restaurantId Int

  @@id([id, dishId, restaurantId])
}

model Invitation {
  id String @id @default(cuid())

  status InvitationStatus @default(ACTIVE)

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  restaurant Json
  optionDict Json
  dishDict   Json

  createdBy   User?   @relation(fields: [createdById], references: [id], onDelete: SetNull)
  createdById String?

  invitationRestaurant  InvitationRestaurant?
  invitationOptions     InvitationOption[]
  invitationOptionItems InvitationOptionItem[]
  orders                Order[]
}

model Order {
  id Int @id @default(autoincrement())

  invitation   Invitation @relation(fields: [invitationId], references: [id], onDelete: Cascade)
  invitationId String

  invitationRestaurant   InvitationRestaurant @relation(fields: [invitationRestaurantId], references: [id], onDelete: Cascade)
  invitationRestaurantId Int

  orderedBy   User?   @relation(fields: [orderedById], references: [id], onDelete: SetNull)
  orderedById String?

  orderDishes OrderDish[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([orderedById, invitationRestaurantId, invitationId])
  @@index([invitationRestaurantId, invitationId, createdAt(sort: Desc)])
}

model OrderDish {
  id      String @id
  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId Int

  invitationRestaurant   InvitationRestaurant @relation(fields: [invitationRestaurantId], references: [id], onDelete: Cascade)
  invitationRestaurantId Int

  invitationDish   InvitationDish @relation(fields: [invitationDishId, invitationRestaurantId], references: [id, invitationRestaurantId], onDelete: Cascade)
  invitationDishId Int

  dishPrice  Int
  totalPrice Int

  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  orderDishOptions OrderDishOption[]
}

model OrderDishOption {
  id String @id

  orderDish   OrderDish @relation(fields: [orderDishId], references: [id], onDelete: Cascade)
  orderDishId String

  invitationOption   InvitationOption @relation(fields: [invitationOptionId, invitationRestaurantId], references: [id, invitationRestaurantId])
  invitationOptionId Int

  invitationRestaurant   InvitationRestaurant @relation(fields: [invitationRestaurantId], references: [id], onDelete: Cascade)
  invitationRestaurantId Int
  price                  Int

  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  orderDishOptionItems OrderDishOptionItem[]
}

model OrderDishOptionItem {
  id                String          @id
  orderDishOption   OrderDishOption @relation(fields: [orderDishOptionId], references: [id], onDelete: Cascade)
  orderDishOptionId String

  invitationOptionItem       InvitationOptionItem @relation(fields: [invitationOptionItemId, invitationOptionItemDishId, invitationRestaurantId], references: [id, dishId, invitationRestaurantId])
  invitationOptionItemId     Int
  invitationOptionItemDishId Int
  invitationRestaurantId     Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BlacklistedUser {
  id     String  @id @default(cuid())
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String?

  @@unique([userId])
}

enum InvitationStatus {
  ACTIVE
  CANCELLED
  COMFIRMED
  COMPLETED
  EXPIRED
}

model InvitationRestaurant {
  id                Int     @id @default(autoincrement())
  restaurantId      Int     @default(autoincrement())
  deliveryId        Int
  name              String
  address           String  @db.Text
  url               String
  isQualityMerchant Boolean @default(false)
  isAvailable       Boolean @default(false)
  position          Json
  priceRange        Json

  photos Json

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  invitation            Invitation             @relation(fields: [invitationId], references: [id], onDelete: Cascade)
  invitationId          String                 @unique
  invitationDishes      InvitationDish[]
  invitationOptions     InvitationOption[]
  invitationDishTypes   InvitationDishTypes[]
  orderDishes           OrderDish[]
  orderDishOptions      OrderDishOption[]
  orders                Order[]
  invitationOptionItems InvitationOptionItem[]
}

model InvitationDishTypes {
  id                     Int
  name                   String
  restaurant             InvitationRestaurant @relation(fields: [invitationRestaurantId], references: [id], onDelete: Cascade)
  invitationRestaurantId Int
  displayOrder           Int                  @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  invitationDishTypeAndDishes InvitationDishTypeAndDishes[]

  @@id([id, invitationRestaurantId])
  @@unique([id, invitationRestaurantId])
  @@index(displayOrder, name: "invitataionDishTypesDisplayOrder")
}

model InvitationDishTypeAndDishes {
  id Int @id @default(autoincrement())

  dish   InvitationDish @relation(fields: [dishId, invitationRestaurantId], references: [id, invitationRestaurantId], onDelete: Cascade)
  dishId Int

  dishtype               InvitationDishTypes @relation(fields: [dishTypeId, invitationRestaurantId], references: [id, invitationRestaurantId], onDelete: Cascade)
  dishTypeId             Int
  invitationRestaurantId Int

  @@unique([id, dishId])
}

model InvitationDish {
  id          Int     @default(autoincrement())
  name        String  @db.Text
  description String  @db.Text
  isAvailable Boolean @default(true)
  isActive    Boolean @default(true)

  price Json

  discountPrice Json

  photos Json

  createdAt                   DateTime                      @default(now())
  updatedAt                   DateTime                      @updatedAt
  invitationDishTypeAndDishes InvitationDishTypeAndDishes[]

  invitationRestaurant   InvitationRestaurant   @relation(fields: [invitationRestaurantId], references: [id], onDelete: Cascade)
  invitationRestaurantId Int
  invitationDishOptions  InvitationDishOption[]
  orderDishes            OrderDish[]

  @@id([id, invitationRestaurantId])
}

model InvitationDishOption {
  id                     Int              @default(autoincrement())
  invitationDish         InvitationDish   @relation(fields: [dishId, invitationRestaurantId], references: [id, invitationRestaurantId], onDelete: Cascade)
  dishId                 Int
  invitationOption       InvitationOption @relation(fields: [optionId, invitationRestaurantId], references: [id, invitationRestaurantId], onDelete: Cascade)
  optionId               Int
  invitationRestaurantId Int

  @@id([id, invitationRestaurantId])
}

model InvitationOption {
  id                    Int                    @default(autoincrement())
  isMandatory           Boolean                @default(false)
  name                  String
  ntop                  String
  invitationOptionItems InvitationOptionItem[]

  restaurant             InvitationRestaurant @relation(fields: [invitationRestaurantId], references: [id], onDelete: Cascade)
  invitationRestaurantId Int

  invitation   Invitation @relation(fields: [invitationId], references: [id], onDelete: Cascade)
  invitationId String

  minQuantity           Int
  maxQuantity           Int
  invitationDishOptions InvitationDishOption[]
  orderDishOptions      OrderDishOption[]

  @@id([id, invitationRestaurantId])
  @@index([invitationRestaurantId])
}

model InvitationOptionItem {
  id          Int     @default(autoincrement())
  name        String
  weight      Int?
  price       Json
  ntopPrice   Json
  isDefault   Boolean @default(false)
  maxQuantity Int?
  topOrder    Int     @default(0)
  dishId      Int

  option             InvitationOption? @relation(fields: [invitationOptionId, invitationRestaurantId], references: [id, invitationRestaurantId])
  invitationOptionId Int?

  invitationRestaurant   InvitationRestaurant @relation(fields: [invitationRestaurantId], references: [id], onDelete: Cascade)
  invitationRestaurantId Int

  invitation           Invitation            @relation(fields: [invitationId], references: [id], onDelete: Cascade)
  invitationId         String
  orderDishOptionItems OrderDishOptionItem[]

  @@id([id, dishId, invitationRestaurantId])
}
